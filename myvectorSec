/*

未完成  reserve
		shrink_to_fit
		emplace
		list constructor
		关于arg...相关有问题 
		使用m_deallocate代替 mydeallocate
		实现一个好用的输出模板 
*/ 
/*
可改进
	格式问题
	函数命名
	完成测试编写	
*/
#include <memory>
#include <iostream>
#include <vector>
#include <bits/stl_construct.h>
#include <new>
using namespace std;

template<typename Tp>
	inline Tp*
	myaddressof(Tp &r)
{
	return reinterpret_cast<Tp*>
		(&const_cast<char&>(reinterpret_cast<const volatile char&>(r)));
}
template <typename Tp>
constexpr typename std::remove_reference<Tp>::type&&
mymove(Tp&& t)noexcept{
	return static_cast<typename std::remove_reference<Tp>::type&&>(t);
}
template<typename Tp>
class Myallocator
{
	public:
		typedef size_t     size_type;
		typedef ptrdiff_t  difference_type;
		typedef Tp*		   pointer;
		typedef const Tp*  const_pointer;
		typedef Tp& 	   reference;
		typedef const Tp&  const_reference;
		
		template<typename Tp1>
			struct rebind
			{
				typedef Myallocator<Tp1> other;
			};
		Myallocator() throw(){}
		Myallocator(const Myallocator& a) throw() {}
		template<typename Tp1>
			Myallocator(const Myallocator<Tp1>&)throw (){}
		~Myallocator() throw() {}
		static pointer myallocate(size_type n,const void* = 0){
			return n!=0?static_cast<Tp*>(::operator new(n*sizeof(Tp))):0;
		}
		static void mydeallocate(pointer p,size_type)
		{
			if(p!=NULL)
			::operator delete(p);
		}
	
};
template <class T,class Alloc>
class simple_alloc{
	public:
		static T* myallocate(size_t n)
			{ return 0==n?0:(T*)(Alloc::myallocate(n*sizeof(T))); }
		static T *myallocate(void)
			{ return (T*) Alloc::myallocate(sizeof(T)); }
		static void mydeallocate(T *p,size_t n)
			{ if(0!=n) Alloc::mydeallocate(p,n*sizeof(T)); }
		static void mydeallocate(T *p)
			{ Alloc::mydeallocate(p,sizeof(T)); }
};
template <
	class T,
	class Allocator=Myallocator<T>
>class myvector{
	public:
		typedef T 					value_type;
		typedef value_type* 		pointer;
		typedef value_type* 		iterator;
		typedef const value_type*   const_iterator;
		typedef value_type& 		reference;
		typedef const value_type&   const_reference;
		typedef reverse_iterator<iterator> reverse_iterator;
		typedef size_t      		size_type;
		typedef ptrdiff_t   		difference_type;
		typedef simple_alloc<value_type,Allocator> allocator_type;
	
	protected:
		
		iterator start;
		iterator finish;
		iterator end_of_storage;
		
		void insert_aux(iterator position,const T& x);
		
	//	template<typename ...Args>
	//	void insert_aux(iterator position,Args&&...args);
		void m_fill_insert(iterator position,size_type n,const value_type& x);
		template<typename Integer>
		void insert_dispatch(iterator pos,Integer n,Integer val,true_type){
			m_fill_insert(pos,n,val);
		}
		template<typename InputIterator>
		void insert_dispatch(iterator pos,InputIterator first,InputIterator last,false_type){
			typedef typename std::iterator_traits<InputIterator>::iterator_category IterGategory;
			range_insert(pos,first,last,IterGategory());
		}
		//这里作为traits的例子
		template<typename InputIterator>
		void range_insert(iterator pos,InputIterator first,InputIterator last,std::input_iterator_tag); 
		
		template<typename ForwardIterator>
		void range_insert(iterator pos,ForwardIterator first,ForwardIterator last,std::forward_iterator_tag);
		
		iterator m_erase(iterator position);
		iterator m_erase(iterator first,iterator last);
		
		void m_default_append(size_type n);
		
		void fill_initialize(size_type n,const T& value){
			start=allocate_and_fill(n,value);
			finish=start+n;
			end_of_storage=finish;
		}	
		void m_default_initialized(size_type n){
			start=allocator_type::myallocate(n);
			finish=start;
			std::fill_n(start,n,value_type());
			finish+=n;
			
		}
		template<typename Integer>
		void m_initialize_dispatch(Integer n,Integer value,true_type){
			start=allocator_type::myallocate(static_cast<size_type>(n));
			end_of_storage=start+static_cast<size_type>(n);
			fill_initialize(static_cast<size_type>(n),value);
			
		}
		template<typename InputIterator>
		void m_initialize_dispatch(InputIterator first,InputIterator last,false_type){
			typedef typename std::iterator_traits<InputIterator>::iterator_category IterCateGory;
			m_range_initialize(first,last,IterCateGory());
		}
		template<typename InputIterator>
		void m_range_initialize(InputIterator first,InputIterator last,std::input_iterator_tag){
			for(;first!=last;++first)
				push_back(*first);
		}
		template<typename ForwardIterator>
		void m_range_initialize(ForwardIterator first,ForwardIterator last,std::forward_iterator_tag){
			const size_type n=std::distance(first,last);
			start=allocator_type::myallocate(n);
			finish=uninitialized_copy(first,last,start);
		}
		template<typename ForwardIterator>
		pointer m_allocate_and_copy(size_type n,ForwardIterator first,ForwardIterator last){
			pointer result=allocator_type::myallocate(n);
			try{
				std::uninitialized_copy(first,last,result);
				return result;
			}catch(...){
					allocator_type::mydeallocate(result,n);
					throw;
			}
		}
		void mydeallocate(){
			if(start){
				allocator_type::mydeallocate(start,end_of_storage-start);
			}
		}
	public:
		//constructor
	    explicit myvector(const allocator_type& alloc=allocator_type())
				:start(0),finish(0),end_of_storage(0)
		{ };
		//fill construct
		myvector(size_type count,
				 const value_type& value=value_type(),
				 const allocator_type& alloc=allocator_type()){
			fill_initialize(count,value);
		}
		//copy constructor
		myvector(const myvector& x){
			//问题！！！这里还没有分配空间 就直接构造 
			m_default_initialized(x.size());
			this->finish=std::uninitialized_copy(x.begin(),x.end(),this->start);
			end_of_storage=finish;
		}
		//range construcor
		template <typename InputIterator,
			typename=std::_RequireInputIter<InputIterator>>
		myvector(InputIterator first,InputIterator last){
			
			m_initialize_dispatch(first,last,false_type());
			
		}
		~myvector(){
			_Destroy(start,finish);
			mydeallocate();
		}
		myvector& operator=(const myvector& x);
		//iterator
		iterator begin(){ return start; }
		const_iterator begin() const { return const_iterator(start); }
		const_iterator cbegin() const { return const_iterator(start); }
		iterator end(){ return finish; }
		const_iterator end() const { return const_iterator(finish); }
		const_iterator cend() const { return const_iterator(finish); }
		
		reverse_iterator rbegin(){ return reverse_iterator(end()); }
		reverse_iterator rend() { return reverse_iterator(begin()); }
		//capacity
		size_type size()const{ return size_type(end()-begin()); }
		size_type max_size() const { }
		/*before c11
		会出现堆栈溢出的问题，引起某个vector无法释放,原因未明 
		void resize(size_type new_size,value_type val=value_type()){
			if(new_size>size())
				insert(end(),new_size-size(),val);
			else if(new_size<size())
				erase_at_end(start+new_size);
		}*/
		void resize(size_type new_size){
			if(new_size>size())
				m_default_append(new_size-size());
			else if(new_size<size())
				erase_at_end(start+new_size);
		}
		void resize(size_type new_size,const value_type& x){
			if(new_size>size())
				insert(end(),new_size-size(),x);
			else if(new_size<size())
				erase_at_end(start+new_size);
		}
		size_type capacity()const{ return size_type(end_of_storage-begin()); }
		bool empty()const{ return begin()==end(); }
		void reserve(size_type n);
		void shrink_to_fit();
		//elemet access
		reference operator[] (size_type n){ return *(start+n); }
		const_reference operator[] (size_type n)const{ return *(start+n); };
	protected:
		void range_check(size_type n)const{
			if(n>this->size())
				throw out_of_range("out of range");
		}
	public:
		reference at(size_type n) {
			range_check(n);
			return (*this)[n]; 
		}
		//just return differ cant be overload!!!!
		//if we remove const there will be a mistake
		const_reference at(size_type n)const{
			range_check(n);
			return (*this)[n];
		}
		reference front() { return *begin();}
		const_reference front() const { return *begin();}
		reference back() { return *(end()-1);}
		const_reference back() const { return *(end()-1);}
		pointer data() noexcept{ return data_ptr(start); }
		//modifiers
		//fill(2)
		
		void push_back(const value_type &val){
			if(finish!=end_of_storage){
				_Construct(finish,val);
				++finish;
			}else{
				insert_aux(end(),val);
			}
		}
		void pop_back(){
			--finish;
			destory(finish);
		}
		//emplace
		template<typename ...Args>
		iterator emplace(const_iterator position,Args&&...args);
		//single element insert
		iterator insert(const_iterator position,const value_type& val){
			const size_type n=position-begin();
			if(finish!=end_of_storage&&position==end()){
				construct(finish,val);
				++finish;
			}else{
				const auto pos=begin()+(position-cbegin());
				if(finish!=end_of_storage){
					T x_copy=val;
					insert_aux(pos,std::move(x_copy));
				}else{
					insert_aux(pos,val);
				}
				
			}
			return iterator(start+n);
		}
		//fill insert
		iterator insert(const_iterator position,size_type n,const value_type& val){
			difference_type offset=position-cbegin();
			m_fill_insert(begin()+offset,n,val);
			return begin()+offset;
		}
		//range insert
		template<typename InputIterator,
			typename=std::_RequireInputIter<InputIterator>>
		iterator insert(const_iterator position,InputIterator first,InputIterator last){
			difference_type offset=position-cbegin();
			insert_dispatch(begin()+offset,first,last,false_type());
			return begin()+offset;
		}
		
		//move insert
		//这里是参数列表已经移动函数的应用 
		iterator insert(iterator position,const value_type&& val){
			return emplace(position,std::move(val));
		}
		//erase
		void erase_at_end(iterator pos){
			finish=pos;
		}
		//erase single
		iterator erase(iterator position){
			return m_erase(position);
		}
		//erase range
		iterator erase(iterator first,iterator last){
			return m_erase(first,last);
		}
		//swap
		//这里没有做alloc的交换 
		void swap(myvector& x){
			std::swap(this->start,x.start);
			std::swap(this->finish,x.finish);
			std::swap(this->end_of_storage,x.end_of_storage);
		}
		void clear(){
			erase_at_end(begin());
		}
	protected:
		iterator allocate_and_fill(size_type n,const T& x){
			iterator result=allocator_type::myallocate(n);
			uninitialized_fill_n(result,n,x);
			return result;
		}
		size_type check_len(size_type n,const char *s)const{
			//max_size平台依赖 暂时先不处理 
			//if(max_size()-size()<n)
			//	throw length_error(s);
			const size_type len=size()+std::max(size(),n);
			//return (len<size()||len>max_size())?max_size():len;
			return len;
		}
		template<typename T1, typename T2>
    	void construct(T1* p, const T2& value){
      		::new(static_cast<void*>(p)) T1(value);
    	}
    
 /*   	template<typename Tp,typename ...Args>
    	void construct(Tp *p,Args&&...args){
    		//::new(static_cast<void*>(p)) Tp(std::forward<Args>(args...));
    		construct(std::forward<Tp*>(p),std::forward<Args>(args)...);
    		//::new(static_cast<void *>(p)) Tp(std::forward<Args>(args)...);
		}
*/		
	    template<typename T1>
	    inline void destory(T1 *point){
	    	point->~T1();
		}
		template<typename ForwardIterator>
		inline void destory_aux(ForwardIterator first,ForwardIterator last){
			for(;first<last;++first)
				destory(&*first);
		}
	private:
		template<typename ptr>
		typename std::pointer_traits<ptr>::element_type*
		data_ptr(ptr myptr)const
		{ return empty()?nullptr:myaddressof(*myptr); }	
		
};
//copy operator =
template<typename T,typename Allocator>
myvector<T,Allocator>&
myvector<T,Allocator>::operator=(const myvector<T,Allocator>& x){
	if(&x!=this){
		//这里c11使用__alloc_on_copy 直接copy代表分配的m_impl 
		const size_type len=x.size();
		//所需空间比容量大，重新分配
		//比size小。copy一下 
		//size---x---capacity 
		if(len>capacity()){
			pointer tmp=m_allocate_and_copy(len,x.begin(),x.end());
			destory_aux(this->start,this->finish);
			allocator_type::mydeallocate(this->start,this->end_of_storage-this->start);
		}else if(size()>=len){
			destory_aux(std::copy(x.begin(),x.end(),begin()),end());
		}else{
			std::copy(x.start,x.start+size(),this->start);
			uninitialized_copy(x.start+size(),x.finish,this->finish);
		}
		this->finish=this->start+len;
	}
	return *this;
}
//non-member function operator
template<typename T,typename Allocator>
 bool operator==(const myvector<T,Allocator>& x,const myvector<T,Allocator>& y){
	return (x.size()==y.size())&&std::equal(x.begin(),x.end(),y.begin());
}
template<typename T,typename Allocator>
 bool operator!=(const myvector<T,Allocator>& x,const myvector<T,Allocator>& y){
	return !(x==y);
}
template<typename T,typename Allocator>
inline bool operator<(const myvector<T,Allocator>& x,const myvector<T,Allocator>& y){
	return std::lexicographical_compare(x.begin(),x.end(),y.begin(),y.end());
}
template<typename T,typename Allocator>
inline bool operator>(const myvector<T,Allocator>& x,const myvector<T,Allocator>& y){
	return y<x;
}
template<typename T,typename Allocator>
inline bool operator>=(const myvector<T,Allocator>& x,const myvector<T,Allocator>& y){
	return !(x<y);
}
template<typename T,typename Allocator>
inline bool operator<=(const myvector<T,Allocator>& x,const myvector<T,Allocator>& y){
	return !(y<x);
}
template<typename T,typename Allocator>
inline bool swap(const myvector<T,Allocator>& x,const myvector<T,Allocator>& y){
	x.swap(y);
}
template<typename T,typename Allocator>
void myvector<T,Allocator>::m_default_append(size_type n){
	if(n!=0){
		if(size_type(end_of_storage-finish)>=n){
			std::fill_n(finish,n,T());
			finish+=n;
		}else{
			const size_type len=check_len(n,"myvector::m_default_append");
			const size_type old_size=this->size();
			pointer new_start(allocator_type::myallocate(len));
			pointer new_finish(new_start);
			try{
				new_finish=std::uninitialized_copy(start,finish,new_start);
				std::fill_n(new_finish,n,T());
				new_finish+=n;
			}catch(...){
				destory_aux(new_start,new_finish);
				allocator_type::mydeallocate(new_start,len);
				throw;
			}
			destory_aux(start,finish);
			mydeallocate();
			start=new_start;
			finish=new_finish;
			end_of_storage=new_start+len;
		}
	}
}
template<typename T,typename Allocator>
template<typename...Args>
typename myvector<T,Allocator>::iterator
myvector<T,Allocator>::emplace(const_iterator position,Args&&...args){
	const size_type n=position-begin();
	if(finish!=end_of_storage&&position==end()){
		//简单的展示一下 并未实现
		construct(finish,std::forward<Args>(args)...);
		++finish;
	}else{
		insert_aux(begin()+(position-cbegin()),std::forward<Args>(args)...);
		return iterator(start+n);
	}
}
template<typename T,typename Allocator>
typename myvector<T,Allocator>::iterator
myvector<T,Allocator>::m_erase(iterator position){
	if(position+1!=end())
		std::move(position+1,end(),position);
	--finish;
	destory(finish);
	return position;
	
}
template<typename T,typename Allocator>
typename myvector<T,Allocator>::iterator
myvector<T,Allocator>::m_erase(iterator first,iterator last){
	if(first!=last){
		if(last!=end())
			std::move(last,end(),first);
		erase_at_end(first+(end()-last));
	}
	return first;
	
}
template <
	class T,
	class Allocator
>void myvector<T, Allocator>::insert_aux(iterator position,const T& x){
	//这里采用c11以前的写法  没有使用arg&&...和forward 
	if(finish!=end_of_storage){
		cout<<finish<<endl;
		cout<<end_of_storage<<endl;
		construct(finish,*(finish-1));
		cout<<"not same"<<endl;
		++finish;
		T x_copy=x;
	
		copy_backward(position,finish-2,finish-1);
		*position=x_copy;
	}else{
		//without check same as---->size_type len=size()!=0?2*size():1  
		const size_type len=check_len(size_type(1),"vector::insert_aux");
	//	const size_type len=size()!=0?2*size():1;
		const size_type elems_before=position-begin();
		pointer new_start(allocator_type::myallocate(len));
		pointer new_finish(new_start);
		try{
			//存疑 stl书中construct 顺序与源码中不符 
			
			new_finish=0;
			new_finish=uninitialized_copy(start,position,new_start);
		//	_Construct(new_start+elems_before,x);
			construct(new_finish,x);
			++new_finish;
			new_finish=uninitialized_copy(position,finish,new_finish);
		}catch(...){
			destory_aux(new_start,new_finish);
			allocator_type::mydeallocate(new_start,len);
			throw;
		}
		destory_aux(start,finish);
		mydeallocate();
		
		start=new_start;
		finish=new_finish;
		end_of_storage=new_start+len;
		
	}

}
/*
template <typename T,typename Allocator>
template <typename ...Args>
void myvector<T, Allocator>::insert_aux(iterator position,Args&&...args){
	//这里采用c11以前的写法  没有使用arg&&...和forward 
	if(finish!=end_of_storage){
		cout<<finish<<endl;
		cout<<end_of_storage<<endl;
		construct(finish,*(finish-1));
		cout<<"not same"<<endl;
		++finish;
		copy_backward(position,finish-2,finish-1);
		*position=T(std::forward<Args>(args)...);
	}else{
		//without check same as---->size_type len=size()!=0?2*size():1  
		const size_type len=check_len(size_type(1),"vector::insert_aux");
	//	const size_type len=size()!=0?2*size():1;
		const size_type elems_before=position-begin();
		pointer new_start(allocator_type::myallocate(len));
		pointer new_finish(new_start);
		try{
			//存疑 stl书中construct 顺序与源码中不符 
			construct(new_start+elems_before,std::forward<Args>(args)...);
			new_finish=0;
			new_finish=uninitialized_copy(start,position,new_start);
		//	_Construct(new_start+elems_before,x);
		//	construct(new_finish,x);
			++new_finish;
			new_finish=uninitialized_copy(position,finish,new_finish);
		}catch(...){
			destory_aux(new_start,new_finish);
			allocator_type::mydeallocate(new_start,len);
			throw;
		}
		destory_aux(start,finish);
		mydeallocate();
		
		start=new_start;
		finish=new_finish;
		end_of_storage=new_start+len;
		
	}

}*/
template<
	typename T,
	typename Allocator
>void myvector<T,Allocator>::m_fill_insert(iterator position,size_type n,const value_type& x){
		if(n!=0){
			if(size_type(end_of_storage-finish)>=n){
				value_type x_copy=x;
				const size_type elems_after=end()-position;
				pointer old_finish(finish);
				if(elems_after>n){
					uninitialized_copy(finish-n,finish,finish);
					finish+=n;
					copy_backward(position,old_finish-n,old_finish);
					std::fill(position,position+n,x_copy);
				}else{
					uninitialized_fill_n(finish,n-elems_after,x_copy);
					finish+=n-elems_after;
					uninitialized_copy(position,old_finish,finish);
					finish+=elems_after;
					fill(position,old_finish,x_copy);
				}
			}else{
				const size_type len=check_len(n,"vector::m_fill_insert");
				const size_type elems_before=position-begin();
				pointer new_start(allocator_type::myallocate(len));
				pointer new_finish(new_start);
				try{
					uninitialized_fill_n(new_start+elems_before,n,x);
					new_finish=0;
					new_finish=uninitialized_copy(start,position,new_start);
					new_finish+=n;
					new_finish=uninitialized_copy(position,finish,new_finish);
				}catch(...){
					if(!new_finish)
						destory_aux(new_start+elems_before,new_start+elems_before+n);
					else
						destory_aux(new_start,new_finish);
					allocator_type::mydeallocate(new_start,len);
					//throw ;
				}
				destory_aux(start,finish);
				allocator_type::mydeallocate(new_start,len);
				
				start=new_start;
				finish=new_finish;
				end_of_storage=new_start+len;
			}
		}
}
template<typename T,typename Alloc>
	template<typename InputIterator>
void myvector<T,Alloc>::range_insert(iterator pos,InputIterator first,
	InputIterator last,std::input_iterator_tag){
	for(;first!=last;++first){
		pos=insert(pos,*first);
		++pos;
	}
}
template<typename T,typename Alloc>
	template<typename ForwardIterator>
void myvector<T,Alloc>::range_insert(iterator position,ForwardIterator first,
	ForwardIterator last,std::forward_iterator_tag){
	if(first!=last){
		const size_type n=std::distance(first,last);
		if(size_type(end_of_storage-finish)>=n){
			const size_type elems_after=end()-position;
			pointer old_finish(finish);
			if(elems_after>n){
				uninitialized_copy(finish-n,finish,finish);
				finish+=n;
				copy_backward(position,old_finish-n,old_finish);
				std::copy(first,last,position);
			}else{
				ForwardIterator mid=first;
				std::advance(mid,elems_after);
				uninitialized_copy(mid,last,finish);
				finish+=n-elems_after;
				uninitialized_copy(position,old_finish,finish);
				finish+=elems_after;
				std::copy(first,mid,position);
			}
		}else{
			const size_type len=check_len(n,"vector::range_insert");
			pointer new_start(allocator_type::myallocate(len));
			pointer new_finish(start);
			try{
				new_finish=uninitialized_copy(start,position,new_start);
				new_finish=uninitialized_copy(first,last,new_finish);
				new_finish=uninitialized_copy(position,finish,new_finish);
			}catch(...){
				destory_aux(new_start,new_finish);
				allocator_type::mydeallocate(new_start,len);
				throw;
			}
			destory_aux(start,finish);
			mydeallocate();
			start=new_start;
			finish=new_finish;
			end_of_storage=new_start+len;
			
		}
		
	}
}
int main()
{
	
 	myvector<int> b(4,1);
 	cout<<(b.end()-b.begin())<<endl;
    cout<<b.front()<<endl;
    cout<<b.back()<<endl;
   
  	
    //cout<<b[0]<<endl;
    //cout<<b.at(2)<<endl;
    //out of range call terminate
    //cout<<b.at(20)<<endl;
	//int *p=b.data();
	//*p=10;
	//++p;
	//*p=20;
	//cout<<b[0]<<endl;
	//cout<<b[1]<<endl; 
	for(int i=1;i<100;i++)
		b.push_back(i);  
	for(int i=0;i<100;++i)
		cout<<b[i]<<" ";
	cout<<"b.capacity(): "<<b.capacity()<<endl;
	cout<<"b.size(): "<<b.size()<<endl;
	b.insert(b.end(),1111);
	cout<<b.back()<<endl;
	b.pop_back();
	cout<<b.back()<<endl;
	myvector<int> c(3,3);
	b.insert(b.end(),c.begin(),c.end());
	cout<<b.back()<<endl;
//	b.emplace(b.end()-2,111,1,1);
//	cout<<b.back()<<endl;
	cout<<b.size()<<endl;
	b.erase(b.end()-1);
	cout<<b.size()<<endl;
		cout<<b.size()<<endl;
	b.erase(b.end()-4,b.end()-2);
	cout<<b.size()<<endl;
	cout<<b.capacity()<<endl;
	b.insert(b.end(),10,1);
		for(int i=0;i<b.size();++i)
		cout<<b[i]<<" ";
	cout<<b.size()<<endl;
	cout<<b.capacity()<<endl;
	b.resize(200);
	cout<<b.size()<<endl;
	cout<<b.capacity()<<endl;
	b.insert(b.end(),10,1);
	cout<<b.back()<<endl;
	myvector<int> d(c);
	//3 3 3
	for(int i=0;i<d.size();++i)
		cout<<d[i]<<" ";
	cout<<endl;
	myvector<int> e(b.begin(),b.end());
	for(int i=0;i<e.size();++i)
		cout<<e[i]<<" ";
	cout<<endl;
//	while(1);
//resize存在段错误 待修正 
//	b.resize(300,1);
cout<<e.size()<<endl;
	cout<<(b==c)<<endl;
	cout<<(b!=c)<<endl;
	for(auto i:c){
		cout<<i<<" ";
	}
	cout<<endl;
	b=c;
		for(int i=0;i<b.size();++i)
		cout<<b[i]<<" ";
	return 0;
}
