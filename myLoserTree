#include <iostream>
#include <limits>
#include <algorithm>
#include <string.h>
using namespace std;
const int K=4;
const int MaxInt=INT_MAX;
const int MinInt=INT_MIN;

int a[][8]={
			{0,3,5,8,MaxInt},
			{2,6,9,MaxInt},
			{1,3,8,MaxInt},
			{5,9,12,17,MaxInt}
			};
int loserTree[K];                   //存放内存点 
int b[K+1];							// 存放叶子节点

void Adjust(int leaf)
{
	int parent=(leaf+K)/2;
	int winner=leaf;
	while(parent>0)
	{
		if(b[winner]>b[loserTree[parent]])
			swap(winner,loserTree[parent]);
		parent/=2;
	}
	loserTree[0]=winner;
}
void CreateLoserTree()
{
	for(int i=0;i<K;++i)
		loserTree[i]=K;
	
	for(int i=K-1;i>=0;--i)
		Adjust(i);
} 
void KMerge()
{
	int pa[K];
	memset(pa,0,sizeof(pa));
	
	for(int i=0;i<K;++i)
	{
		b[i]=a[i][pa[i]];
		++pa[i];
		cout<<"pa."<<i<<": "<<pa[i]<<" ";
	}
	cout<<endl;
	b[K]=MinInt;
	CreateLoserTree();
	
	while(b[loserTree[0]]!=MaxInt)
	{
		cout<<b[loserTree[0]]<<" ";
		int i=loserTree[0];
		b[i]=a[i][pa[i]++];
		Adjust(i);
	}
	cout<<endl;
}
int main()
{
	KMerge();	
} 
