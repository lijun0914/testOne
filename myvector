#include <memory>
#include <iostream>

using namespace std;
template<typename Tp>
class Myallocator
{
	public:
		typedef size_t     size_type;
		typedef ptrdiff_t  difference_type;
		typedef Tp*		   pointer;
		typedef const Tp*  const_pointer;
		typedef Tp& 	   reference;
		typedef const Tp&  const_reference;
		
		template<typename Tp1>
			struct rebind
			{
				typedef Myallocator<Tp1> other;
			};
		Myallocator() throw(){}
		Myallocator(const Myallocator& a) throw() {}
		template<typename Tp1>
			Myallocator(const Myallocator<Tp1>&)throw (){}
		~Myallocator() throw() {}
		static pointer myallocate(size_type n,const void* = 0){
			return n!=0?static_cast<Tp*>(::operator new(n*sizeof(Tp))):0;
		}
		static void mydeallocate(pointer p,size_type)
		{
			::operator delete(p);
		}
		 
		
};
template <class T,class Alloc>
class simple_alloc{
	public:
		static T* myallocate(size_t n)
			{ return 0==n?0:(T*)(Alloc::myallocate(n*sizeof(T))); }
		static T *myallocate(void)
			{ return (T*) Alloc::myallocate(sizeof(T)); }
		static void mydeallocate(T *p,size_t n)
			{ if(0!=n) Alloc::mydeallocate(p,n*sizeof(T)); }
		static void mydeallocate(T *p)
			{ Alloc::mydeallocate(p,sizeof(T)); }
};
template <
	class T,
	class Allocator=Myallocator<T>
>class myvector{
	public:
		typedef T 					value_type;
		typedef value_type* 		pointer;
		typedef value_type* 		iterator;
		typedef const value_type*   const_iterator;
		typedef value_type& 		reference;
		typedef const value_type&   const_reference;
		typedef size_t      		size_type;
		typedef ptrdiff_t   		difference_type;
		typedef simple_alloc<value_type,Allocator> allocator_type;
	
	protected:
		
		iterator start;
		iterator finish;
		iterator end_of_storage;
		
		void fill_initialize(size_type n,const T& value){
			start=allocate_and_fill(n,value);
			finish=start+n;
			end_of_storage=finish;
		}	
	public:
	    explicit myvector(const allocator_type& alloc=allocator_type())
				:start(0),finish(0),end_of_storage(0)
		{ };
		myvector(size_type count,
				 const value_type& value=value_type(),
				 const allocator_type& alloc=allocator_type()){
			fill_initialize(count,value);
		}
		
		iterator begin(){ return start; }
		const_iterator begin() const { return start; }
		iterator end(){ return finish; }
		const_iterator end() const { return finish; }
		
		reference at(size_type n) { return *(start+n); }
		reference front() { return *begin();}
		const_reference front() const { return *begin();}
		reference back() { return *(end()-1);}
		const_reference back() const { return *(end()-1);}
		
	protected:
		iterator allocate_and_fill(size_type n,const T& x){
			iterator result=allocator_type::myallocate(n);
			uninitialized_fill_n(result,n,x);
			return result;
		}
		
		
};

int main()
{
 
 	myvector<int> b(3,4);
    cout<<b.front()<<endl;
    cout<<b.back()<<endl;
	return 0;
}
